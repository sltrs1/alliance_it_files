#include "helpers.h"

/*

Задание 2:
Дано:
Два файла (1_in.txt, 2_in.txt), содержащие строки, содержащие код авиакомпании и номер
рейса (см. Задача 1).
Нужно:
Обработать каждый файл с исходными данными (1_in.txt, 2_in.txt) с целю отбросить
неуникальные комбинации авиакомпании и номера рейса. Результат работы сохранить в
файлы 1_out.txt и 2_out.txt соответственно. Обработку необходимо делать в параллельных
потоках.

Для решения этой задачи используются наработки из Задачи 1, в частности
каждая прочитанная из исходного файла строка обрабатывается функцией validateString()
для избежания неоднозначности в трактовке записанных номеров (D2 25 и D225 - одна и та же запись).

Если в списке есть невалидные значения, то они игнорируются и не попадают в файл с результатом.

Файлы с входными данными 1_in.txt и 2_in.txt были сгенерированны мной самостоятельно.
Внимание! Предполагается, файлы с входными данными
находятся в том же каталоге, что и исполняемый файл.
В качестве признака конца строки используется \n, а не \r\n, так что
стоит быть осторожнее при пересохранении файлов в разных ОС.

Выходные файлы будут записаны рядом с входными.
*/

int main()
{
    std::vector<std::string> inputFiles;
    inputFiles.emplace_back("1_in.txt");
    inputFiles.emplace_back("2_in.txt");

    std::vector<std::future<int>> threads;

    // В связи с малым объемом данных в сгенерированных мной входных данных
    // первый поток может закончится быстрее, чем будет запущен второй поток,
    // что затруднит наблюдение за ним в отладчике
    for (const auto & f : inputFiles)
    {
        threads.emplace_back( std::async(std::launch::async, processFile, f) );
    }

    for (auto & t : threads)
    {
        t.get();
        //std::cout << t.get() << std::endl;
    }


    return 0;

}
